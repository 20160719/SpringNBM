<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- 加载数据源配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<!-- data source -->
				<value>classpath*:/configure/jdbc/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<bean id="nbmsDruidPooledXAConnection" class="com.alibaba.druid.pool.xa.DruidXADataSource"
		init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${druid.url}" />
        <property name="username" value="${druid.user}" />
        <property name="password" value="${druid.password}" />
        <property name="driverClassName" value="${druid.driverClass}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 连接泄漏处理。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接（例如忘记关闭连接）。 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

        <!-- 配置监控统计拦截的filters, 监控统计："stat",防SQL注入："wall",组合使用： "stat,wall" -->
        <property name="filters" value="stat" />
	</bean>

	 <!-- 对数据源进行代理提高性能-->
    <bean id="nbmsDataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="nbmsDruidPooledXAConnection"/>
    </bean>

	<context:component-scan base-package="com.myself.acceptors.*" />
	<context:component-scan base-package="com.myself.services.*" />
    
	<!-- sqlSessionFactory -->
	<bean id="mysqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="nbmsDataSourceProxy" />
		<property name="typeAliasesPackage" value="com.myself.persistences.entity"/>
		<property name="configLocation" value="classpath:/configure/mybatis/mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:/com/myself/persistences/mapper/../*Mapper.xml" />
	</bean>

	<!-- mapperScannerConfigurer -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="mysqlSessionFactory"/>
		<property name="basePackage" value="com.myself.persistences.mapper" />
	</bean>
	
		
	<!-- <import resource="applicationContext_transaction.xml"/> -->
	
	<import resource="applicationContext_shiro.xml"/>
	
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->
	
 	<!-- TransactionManager -->
    <!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="nbmsDataSourceProxy" />
    </bean> -->
	
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"></tx:annotation-driven> -->
	
	<!-- 服务层事务注解  -->
   <!--  <tx:advice id="txServiceAdvice" transaction-manager="transactionManager">
         <tx:attributes>
              <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"></tx:method>
              <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"></tx:method>
              <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"></tx:method>
              <tx:method name="query*" read-only="true"></tx:method>
              <tx:method name="load*" read-only="true"></tx:method>
         </tx:attributes>
    </tx:advice>
 -->
    <!-- <aop:config>
        <aop:pointcut id="servicePointCut" expression="execution(* com.service.*.impl.*.*(..))"/>
        <aop:advisor advice-ref="txServiceAdvice" pointcut-ref="servicePointCut"/>
    </aop:config> -->
	
	
</beans>